<?php

/**
 * Implementation of hook_perm().
 */
function wisski_images_perm() {
  return array('wisski access images', 'wisski access exif', 'wisski access iptc');
}


function wisski_images_menu() {
  $items['wisski/clear_image_cache'] = array(
    'title' => 'Clear image cache',
    'page callback' => '_wisski_images_clear_cache',
    'access arguments' => array('wisski administrate page'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function _wisski_images_clear_cache() {
  
  if (db_query('TRUNCATE TABLE {wisski_image_cache}') !== FALSE) {
    drupal_set_message(t('Image cache cleared'));
  } else {
    drupal_set_message(t('Image cache cleared'), 'error');
  }

  drupal_goto('<front>');

}


function wisski_images_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('WissKI image view');
    return $block;
                
  } else if ($op == "view") {
    if(is_numeric(arg(1)))
      $node = node_load(arg(1));
    if(!isset($node))
      return;
      
    if(!user_access('wisski access images'))
      return;
      
    if ($delta == 0) {
      $block['subject'] = t('Images');
      module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
      $block['content'] = wisski_images_getImages($node);
      return $block;
    }
  }
}

function wisski_images_getImages($node, $images = 0) {
//  return _wisski_pathbuilder_make_image_string($node, $images,_wisski_pathbuilder_getImages($node, $images));

  // if there is no node, skip it
  if(empty($node))
    return;
  
  // if it is a number, we have to load it
  if(is_numeric($node))
    $node = node_load($node);
  
  // if it is an object and it is not an individual node we have no picture for you (thank you heidi ;D)
  if(is_object($node) && $node->type != "individual")
    return;

  // if it is an object and it seems to be an individual - get the title
  if(is_object($node))
    $title = $node->title;
  else // or did we get a title?
    $title = $node;

  // if we have no title now, we can skip this!
  if(empty($title))
    return;
  
  global $base_url;
  if(!strpos($base_url, $title))
    $title = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($title);

  if($images)
    $result = db_query("SELECT imageurl, subtitle FROM {wisski_image_cache} LEFT JOIN {wisski_weight} ON value = imageurl AND nodeurl = title WHERE nodeurl = '" . $title . "' GROUP BY imageurl ORDER BY weight ASC LIMIT $images");
  else
    $result = db_query("SELECT imageurl, subtitle FROM {wisski_image_cache} LEFT JOIN {wisski_weight} ON value = imageurl AND nodeurl = title WHERE nodeurl = '" . $title . "' GROUP BY imageurl ORDER BY weight ASC");
  
  $images_from_db = array();

  while($image_from_db = db_fetch_array($result))
    $images_from_db[] = array('out' => $image_from_db['imageurl'], 'subtitle' => $image_from_db['subtitle']);
 
  if(empty($images_from_db)) {
    $images_from_db = _wisski_images_getImages($node);
    
    if(!empty($images_from_db))
      foreach($images_from_db as $pic) {
        db_query("INSERT INTO {wisski_image_cache} (nodeurl, subtitle, imageurl) VALUES ('" . mysql_real_escape_string($title) . "', '" . mysql_real_escape_string($pic['subtitle']) . "', '" . mysql_real_escape_string($pic['out']) . "')");
      }
  
    if($images)
      $result = db_query("SELECT imageurl, subtitle FROM {wisski_image_cache} LEFT JOIN {wisski_weight} ON value = imageurl AND nodeurl = title WHERE nodeurl = '" . $title . "' GROUP BY imageurl ORDER BY weight ASC LIMIT $images");
    else
      $result = db_query("SELECT imageurl, subtitle FROM {wisski_image_cache} LEFT JOIN {wisski_weight} ON value = imageurl AND nodeurl = title WHERE nodeurl = '" . $title . "' GROUP BY imageurl ORDER BY weight ASC");
  
    $images_from_db = array();
    while($image_from_db = db_fetch_array($result))
      $images_from_db[] = array('out' => $image_from_db['imageurl'], 'subtitle' => $image_from_db['subtitle']);
  
  }  
  
  //drupal_set_message(serialize($images_from_db));

  return _wisski_images_make_image_string($node, $images, $images_from_db);
}

function _wisski_images_getImages($node, $images = 0) {
  
  if(empty($node))
    return;
  
  if(is_numeric($node) && $node->type != "individual")
    return;

  if(is_object($node))
    $indiv = $node->title;
  else
    $indiv = $node;

  if(empty($indiv))
    return;

  $group = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv), TRUE);
  
  $allgroups = wisski_pathbuilder_getAllMembers($group, FALSE);
  
  $imagegroups = array();
  
  $subtitles = array();
  
  foreach($allgroups as $imagegroup) {
    $data = wisski_pathbuilder_getPathData($imagegroup);
    if($data['fieldtype'] == "images" && $data['enabled']) {
      $imagegroups[$data['group_id']][] = $imagegroup;
    }
    if($data['fieldtype'] == "subtitle" && $data['enabled']) {
      $subtitles[$data['group_id']][] = $imagegroup;
    }

  }
    
  $imagestr = "";
  
  $counter = 0;
  $condition = ("FILTER ( ?x0 = <" . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($indiv). "> ) ");
  
  $total_sparql = "";
 
  $rows = array();
 
  foreach($imagegroups as $parentgroup => $subgroups) { 
    $parentdata = _wisski_pathbuilder_calculate_group_samepart($parentgroup);

    $group_sparql = wisski_pathbuilder_get_sparql($parentgroup, $condition, FALSE, 0, TRUE, array("?x" . floor(count($parentdata)/2)));
    
    $grouprows = wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($group_sparql, 'rows');

    foreach($grouprows as $groupval) {
      $groupcond = $groupval["x" . floor(count($parentdata)/2)];
      $total_condition = $condition . " . FILTER ( ?x" . floor(count($parentdata)/2) . " = <" .$groupcond . "> ) . ";

      foreach($subgroups as $localkey => $imagegroup) {
      
        $image_sparql = wisski_pathbuilder_get_sparql($imagegroup, $total_condition, FALSE, 0, TRUE, array("?out"));
        $subtitle_sparql = "";
        
        if(!empty($subtitles[$parentgroup][$localkey])) {
          $subtitle_sparql = wisski_pathbuilder_get_sparql($subtitles[$parentgroup][$localkey], $total_condition, FALSE, 0, TRUE, array("?out"));
          $subtitle_sparql = str_replace("?out", "?subtitle", $subtitle_sparql);    
        }
        
        if(empty($image_sparql))
          return;
  
        if($images > 0) { 
          $image_sparql .= " LIMIT " . $images - count($rows);
          if(!empty($subtitle_sparql))
            $subtitle_sparql .= " LIMIT " . $images - count($rows);
        }

        $image_rows =  wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($image_sparql, 'rows');

        if(!empty($subtitle_sparql))
          $subtitle_rows = wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($subtitle_sparql, 'rows');
        else
          $subtitle_rows = array();
        
        foreach($image_rows as $row_key => $row_value) {
          foreach($subtitle_rows as $subtitle_row) {
            $image_rows[$row_key] = array_merge($image_rows[$row_key], $subtitle_row);
          } 
        }


        $rows = array_merge($rows, $image_rows);

        if($images != 0 && count($rows) == $images)
          break;
      }
    }
    
  }
  
  return $rows;
}


function _wisski_images_make_image_string($node, $images, $pics = array()) {
  // this is necessary for file handling with umlauts like äöü
  setlocale(LC_CTYPE, "de_DE.UTF-8");
  
  global $base_url, $base_root, $base_path;
    
  if(!is_array($pics) || empty($pics))
    return "";
  
  $imgcount = 1;
    
  foreach($pics as $one_pic) {
    $pic = $one_pic['out'];
    if(!empty($one_pic['subtitle']))
      $subtitle = $one_pic['subtitle'];
    else
      $subtitle = "";
      
    if(!empty($subtitle))      
      $subtitle = t("Image ") . $imgcount++ . ": " . $subtitle;
    if(trim($pic) == "")
      continue;

    $pic = str_replace(' ', '%20', $pic);

    // if imagecache module is running, look if the image is there and get it if it is      
    if(module_exists("imagecache")) {
      $newname = md5($pic);

      // get the extension of the file from the url
      preg_match('/\.(jpg|jpeg|png|gif|bmp|tif|tiff|pdf)$/i', $pic, $extension);
      $extension = $extension[1];

      if(empty($extension)) // assume jpg if we don't know
        $extension = 'jpg';
        
      // should download be forced on click - 0/1
      $force_download = 0;
      
      // check if pyramidal imaging should be done
      $pyr = 0;

      // in case of pdf force download, but the thumbnail has to be jpg
      if($extension == "pdf") {
        $force_download = 1;
        $extension = "jpg";
      }
      
      $make_local_copy = variable_get('wisski_images_make_local_copy', TRUE);

      if (!$make_local_copy) {
        // we don't want to make local copies of the images
        // except for thumbnails
        $orig = $pic;
        $pyr_url = $pic;

      } else {
        // make local copies of the images

        // file name for the local copy of the original
        $newfile = $newname . '_orig.' . $extension;
          
        // get the path to it
        $orig = imagecache_create_path('wisski_original', $newfile);
        $preset_orig = imagecache_preset_by_name('wisski_original');

        // check if dir exists, otherwise create it!
        $dir = dirname($orig);
        if (!file_check_directory($dir, FILE_CREATE_DIRECTORY) && !mkdir($dir, 0775, TRUE)) {
          drupal_set_message("Could not provide directory for pyramidal tifs", "error");
          return; 
        }

        global $base_url;

        // if it is not there already, get it
        if(!is_file($orig)) {
          $localpath = str_replace($base_url . '/', "", $pic);
          // it is not locally available
          if(!realpath($localpath)) {
            $fh = @fopen($pic, "rb");
             
            if($fh) {
              $fw = fopen($orig, "w+");
              while(!feof($fh)) {
                fwrite($fw, fread($fh, 1024 * 8 ), 1024 * 8 );
              }
            } else {
              drupal_set_message(t("The file $pic could not be found. Please check the URL."), "error");
              continue;
            }

          } else { // it is already there, just work with it!
            $orig = $localpath;
          }
        } else { // it is locally available
          // work with the local copy  
        }

        // if it is a tif it might have to be converted
        if(strcasecmp($extension, "tif") === 0 || strcasecmp($extension, "tiff") === 0) {
          $lookpath = str_replace('.' .$extension, '.jpg', $orig);
          
          if(file_exists($lookpath)) {
            $orig = $lookpath;
            $extension = "jpg";
            
          } else { // convert it
            
            $image = imageapi_image_open($orig);
            
            if ($image->info['mime_type'] && $image->toolkit == 'imageapi_imagemagick') {

              //get extension
              $current_path = pathinfo($image->source);
              $rsr = $image->source;
              $ext = $current_path['extension'];

              $destination = str_replace('.' . $ext, '.jpg', $image->source);
              
              // only convert the first image [0]
              $command = escapeshellarg($rsr. '[0]') .' '. escapeshellarg($destination);
              if (0 != _imageapi_imagemagick_convert_exec($command, $output, $errors)) {
                return FALSE;
              }
                
              $orig = $destination;
              $extension = "jpg";
            }
          }

          // we need wisski_iip for pyramidal view
          if(module_exists("wisski_iip")) {
            
            // whenever we have tif, make a pyramidal tif.        
            $pyrfile = $newname . '.tif';

            $pyr = imagecache_create_path('wisski_pyramid', $pyrfile);
          
            // check if dir exists, otherwise create it!
            $dir = dirname($pyr);
            if (!file_check_directory($dir, FILE_CREATE_DIRECTORY) && !mkdir($dir, 0775, TRUE)) {
              drupal_set_message("Could not provide directory for pyramidal tifs", "error");
              return; 
            }
          
            $preset_pyr = imagecache_preset_by_name('wisski_pyramid');

            // only convert it, if we need it - otherwise we already have it!
            if(!file_exists($pyr)) { 
              $image = imageapi_image_open($orig);
              
              if ($image->info['mime_type'] && $image->toolkit == 'imageapi_imagemagick') {

                //get extension
                $current_path = pathinfo($image->source);
                $rsr = $image->source;
                //$ext = $current_path['extension'];
                global $base_path;

                $destination = getcwd() . '/' . $pyr;
              
                // only convert the first image [0]
                $command = escapeshellarg($rsr. '[0]') ." -define tiff:tile-geometry=256x256 -compress jpeg 'ptif:" . escapeshellarg($destination) . "'";
                if (0 != _imageapi_imagemagick_convert_exec($command, $output, $errors)) {
                  return FALSE;
                }
              }
            }

            $pyr_url = getcwd() . '/' . $pyr;
          }
          
        }
      }
      
      // now $orig should point to the original file
      $presetname = "wisski_thumbnail";      
      $preset = imagecache_preset_by_name($presetname);
      
      $dst_extension = $extension;
      if (!in_array($dst_extension, array('png', 'gif'))) {
        $dst_extension = 'jpg';
      }

      $dst = imagecache_create_path($presetname, $newname . '.' . $dst_extension);
      $exif = "";
      if(user_access('wisski access exif') && variable_get('wisski_images_show_exif', FALSE)) {
        $exif = wisski_images_render_exifdata($pic);
      }
      
      $info = array();
       
      $iptc = "";  
      if(user_access('wisski access iptc') && variable_get('wisski_images_show_iptc', 0)) {
        // make iptc metadata fieldset
        $pics = getimagesize($pic, $info);
        $iptc = wisski_images_render_iptcdata($info);
      }
      
      // create a thumbnail if its not there
      if (!is_file($dst)) {
        //  imagecache will not scale images directly from web
        // so we have to have it locally and then generate a thumbnail from it
        $local_orig = $orig;
        $delete_copy = FALSE;
        // maybe its a local file path already
        if (!is_file($local_orig)) {
          // check if image lies on same web site => we can use relative path
          $local_orig = str_replace($base_root . $base_path, "", $local_orig);
          if (!is_file($local_orig)) {
            // make a local copy
              $local_orig = file_create_filename('/' . md5($orig) . '.' . $extension, file_directory_temp());

              $fh = @fopen($orig, "rb");
              
              if($fh) {
                $fw = fopen($local_orig, "w+");
                while(!feof($fh)) {
                  fwrite($fw, fread($fh, 1024 * 8 ), 1024 * 8 );
                }
                $delete_copy = TRUE;
              } else {
                drupal_set_message(t("The file $orig could not be found. Please check the URL."), "error");
                continue;
              }
            }
        }

        $a = imagecache_build_derivative($preset['actions'], "$local_orig", $dst);
        if (!$a) {
          drupal_set_message("Could not derive thumbnail from $local_orig.");
        }
        
        if ($delete_copy) file_delete($local_orig);

      }
      
      $container_prefix = '';
      $container_suffix = '';
      if (variable_get('wisski_image_create_link', TRUE)) {
        $link = $orig;
        if (is_file($orig)) {
          $link = $base_root . $base_path . $orig;
        }
        if($force_download == 1) {
            $container_prefix = '<a href="' . $link . '">';
        } else if (!empty($pyr) && module_exists('wisski_iip')) {
          $container_prefix = '<a href="' . $base_root . $base_path . 'node/' . arg(1) . '/zoom?path=' . rawurlencode($pyr_url) . '">';
        } else if (variable_get('wisski_iip_force_viewer', FALSE) && module_exists('wisski_iip') && strpos($link, $base_root) === 0) {
          $link = substr($link, strlen($base_root));
          $container_prefix = '<a href="' . $base_root . $base_path . 'node/' . arg(1) . '/zoom?path=' . rawurlencode($link) . '">';
        } else {
          $container_prefix = '<a href="' . $link . '" class="wisski-image">';
        }
        $container_suffix = '</a>';
      }

      if (is_file($dst)) {
        $imagestr .= '<li><div class="wisski-image-container">' . $container_prefix . '<img src="' . $base_root . $base_path . $dst . '"/>' . $container_suffix . '</div><div class="wisski-image-subtitle">' . $subtitle . '</div>' . $exif . $iptc . '</li>';
      } else {
	drupal_set_message("The image with URL " . $pic . " could not be downloaded. Probably the link is wrong.", "error");
        $imagestr .= '<li><div class="wisski-image-container">' . $container_prefix . '<img src="' . $pic . '"/>' . $container_suffix . '</div><div class="wisski-image-subtitle">' . $subtitle . '</div>' . $exif . $iptc . '</li>';
      }
    } else { // no imagecache?

      $exif = "";
      if(user_access('wisski access exif') && variable_get('wisski_images_show_exif', FALSE) ) {
        $exif = wisski_images_render_exifdata($pic);
      }
      
      $info = array();
      // make iptc metadata fieldset
      $pics = getimagesize($pic, $info);
      
      
      $iptc = "";  
      if(user_access('wisski access iptc') && variable_get('wisski_images_show_iptc', 0)) {
        $iptc = wisski_images_render_iptcdata($info);
      }

      if($pics == 0) {
        drupal_set_message(t("Warning: no picture found at ") + $pic + ".", "error");
        continue;
      }
      $factorx = variable_get("wisski_images_targetImageWidth", 150)/$pics[0];

      $factor = $factorx;
      $imagestr .= '<li><div class="wisski-image-container"><a class="th" href="javascript:void(0);" title="' . $pic . '" onclick="window.open(\'' .
                   $pic . '\', \'\', \'height=' . $pics[1] . ',width=' . $pics[0] . '\');">' .
                   '<img src="' . $pic . '" alt="' . $pic . '"/></a></div>' . '<div class="wisski-image-subtitle">' . $subtitle . '</div>' . $exif . $iptc . '</li>'; //width="' . round($pics[0]*$factor) . '"></a>';
    }
    
  }
  

  if(!empty($imagestr))
    return '<ul class="clearing-thumbs" data-orbit data-clearing>' . $imagestr . '</ul>';
  else
    return "";
}

function wisski_images_render_iptcdata($info) {
  $iptcdata = "";
  $iptc = "";
  $iptcparseddata = "";
      
  // get the iptc data
  if(isset($info['APP13'])) {
    $iptcparseddata = iptcparse($info['APP13']);
  }

  // is there something?
  if(!empty($iptcparseddata)) {     
    $str = wisski_images_render_iptc($iptcparseddata);
    
    if(!empty($str)) {
      $iptcdata['fieldset'] = array("#type" => "fieldset", "#title" => t("IPTC Metadata"), "#collapsible" => TRUE, "#collapsed" => TRUE, "#attributes" => array("class" => "wisski-images-exif-fieldset"));
      $iptcdata['fieldset']['content'] = array('#type' => 'markup', '#value' => $str); 
      $iptc = drupal_render($iptcdata);
    }
  }
  
  return $iptc;
}

function wisski_images_render_exifdata($pic) {
  // make exif metadata dropdown field
  $exifdata = array();
  
  $exifdata['fieldset'] = array("#type" => "fieldset", "#title" => t("Exif Metadata"), "#collapsible" => TRUE, "#collapsed" => TRUE, "#attributes" => array("class" => "wisski-images-exif-fieldset"));
  $read_exif = @exif_read_data($pic);
  $exifdata['fieldset']['content'] = array('#type' => 'markup', '#value' => wisski_images_render_exif($read_exif));

  $exif = drupal_render($exifdata);
  return $exif;
}

function wisski_images_imagecache_default_presets() {
  $presets = array();
  $presets['wisski_thumbnail'] = array (
    'presetname' => 'wisski_thumbnail',
    'actions' => array(
      0 => array(
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => array(
          'width' => '180',
        ),
      ),
    ),
  );
  
  $presets['wisski_original'] = array (
    'presetname' => 'wisski_original',
    'actions' => array(
    ),
  );
  
  // preset for pyramidal tiffs
  $presets['wisski_pyramid'] = array (
    'presetname' => 'wisski_pyramid',
    'actions' => array(
    ),
  );
  
  
  return $presets;
}

function wisski_images_render_exif($exif) {
  $exifstr = "";
  if(empty($exif))
    return "";
  
  foreach($exif as $key => $value) {
    if(is_array($value)) {
      $exifdata = array();
      $exifdata['fieldset'] = array("#type" => "fieldset", "#title" => t(htmlentities(utf8_encode($key))), "#collapsible" => TRUE, "#collapsed" => TRUE, '#attributes' => array('class' => 'wisski-images-exif-fieldset'));
      $exifdata['fieldset']['content'] = array('#type' => 'markup', '#value' => wisski_images_render_exif($value));
      
      $exifstr .= drupal_render($exifdata);
      
    } else {
      $exifstr .= '<div class="wki-data-item"><div class="wki-data-label">' . t(htmlentities(utf8_encode($key))) . '</div><div class="wki-data-value">' . t(htmlentities(utf8_encode($value))) . '</div></div>';
    }
  }

  return $exifstr;
}

function wisski_images_render_iptc($iptc) {
  $iptcstr = "";
  
  if(empty($iptc))
    return "";
  unset($iptc['2#000']);
  
  foreach($iptc as $key => $values) {
    $iptcfieldnames = array('2#105' => 'title', '2#005' => 'documentTitle', '2#120' => 'description', '2#122' => 'descriptionAuthor', '2#080' => 'author', '2#085' => 'authorTitle', '2#005' => 'documentTitle', '2#116' => 'copyright', '2#025' => 'keywords', '2#015' => 'category', '2#090' => 'city', '2#095' => 'state', '2#101' => 'country', '2#040' => 'instruction', '2#055' => 'creationTime');     
    
    if(array_key_exists($key, $iptcfieldnames)) {
      $key = $iptcfieldnames[$key];
    }
    
    $all_empty = true;
    $iptcpartstr = '<div class="wki-data-item"><div class="wki-data-label">' . t(htmlentities(utf8_encode($key))) . '</div>';
    foreach($values as $value) {
      $value = trim($value);
      if(!empty($value)) {
        $iptcpartstr .= '<div class="wki-data-value">' . t(htmlentities(utf8_encode($value))) . '</div>';
        $all_empty = false;
      }
    }
    $iptcpartstr .= '</div>';
    if($all_empty)
      $iptcpartstr = "";
    $iptcstr .= $iptcpartstr;
  }

  return $iptcstr;
}

function wisski_images_imagecache_create_url($presetname, $filepath, $bypass_browser_cache = FALSE, $absolute = TRUE) {
  $args = array('query' => empty($bypass_browser_cache) ? NULL : time());
  $file_directory = file_directory_path();
    
  // Determine the path of the derivative inside the files directory.
  $derivative_path = 'imagecache/'. $presetname .'/'. _imagecache_strip_file_directory($filepath);
        
  // Then construct a full path and see if anyone wants to alter it.
  $altered_path = $old_path = $file_directory .'/'. $derivative_path;
  drupal_alter('file_url', $altered_path);
              
  // If any module has altered the path, then return the alteration...
  if ($altered_path != $old_path) {
  // ...but use url() so our $bypass_browser_cache parameter is honored.
    return url($altered_path, $args);
  }
  
  // It was unchanged so use the download method's prefix.
  $prefix = array(
    FILE_DOWNLOADS_PUBLIC => $file_directory,
    FILE_DOWNLOADS_PRIVATE => 'system/files',
  );
  $path = $prefix[variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC)] .'/'. $derivative_path;

  // Temporarily turn off clean urls setting by default.
  global $conf;
  $bk = $conf['clean_url'];
  $conf['clean_url'] = 0;
        
  $rs = url($path, $args + array('absolute' => $absolute));
          
  // Restore clean urls setting.
  $conf['clean_url'] = $bk;
              
  return $rs;
}


function wisski_images_form_alter(&$form, &$form_state, $form_id) {

  module_load_include('inc', 'node', 'node.pages');

  // add?
  if($form_id == "individual_node_form" && !$form['nid']['#value']) {
    $killhandlers = array("wisski_valuesToStorage", "wisski_saveInstanceOfState", "wisski_savePropertyState", "wisski_node_form_final_submit");
    
    foreach($form['buttons']['submit']['#submit'] as $key => $kill)
      if(in_array($kill, $killhandlers))
        unset($form['buttons']['submit']['#submit'][$key]);

    module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');

    $form['buttons']['submit']['#submit'] = array_merge(array('wisski_images_alter_add_submit'),$form['buttons']['submit']['#submit']);
    if(!empty($form['#submit']))
      $form['#submit'] = array_merge(array('wisski_images_rescue_values'), $form['#submit']);
    else
      $form['#submit'] = array('wisski_images_rescue_values');
  // edit!
  } else if($form_id == "individual_node_form" && $form['nid']['#value']) {
    
    $killhandlers = array("wisski_valuesToStorage", "wisski_saveInstanceOfState", "wisski_savePropertyState", "wisski_node_form_final_submit");
    
    foreach($form['buttons']['submit']['#submit'] as $key => $kill)
      if(in_array($kill, $killhandlers))
        unset($form['buttons']['submit']['#submit'][$key]);

    module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');

    $form['buttons']['submit']['#submit'] = array_merge(array('wisski_images_alter_edit_submit'),$form['buttons']['submit']['#submit']);
    $form['#submit'] = array_merge(array('wisski_images_rescue_values'), $form['#submit']);
  }

}

function wisski_recursive_array_search($needle, &$haystack, $delete) {
  foreach($haystack as $key => $value) { 
    
    $current_key=$key; 
    
    if($needle === $value) {
      if($delete != FALSE)
        $haystack[$key] = "";
      return $current_key; 
    } else if(is_array($value)) {
      $ret = wisski_recursive_array_search($needle, $haystack[$key], $delete);
      if($ret !== FALSE) 
        return $ret;
    }
  } 
  return false;
}

function wisski_imageprocessing($form, &$form_state) {
  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('inc', 'node', 'node.pages');
  
  if($form_state['values']['files']) {
    $allgroups = wisski_pathbuilder_getAllMembers($form_state['values']['group'], FALSE);
        
    $imagegroups = array();
          
    foreach($allgroups as $imagegroup) {
      $data = wisski_pathbuilder_getPathData($imagegroup);
      if($data['fieldtype'] == "images") {
        $imagegroups[] = $imagegroup;
      }
    }
      
    if(count($imagegroups) <= 0) 
      break;

    // path to get to this object
    $to_get_there = array();
    // is a group a multigroup?
    $multigroups = array();
    // what is the length of the path?
    $path_length = array();

    foreach($imagegroups as $imagegroup) {
      $to_get_there[$imagegroup] = array();
      $multigroups[$imagegroup] = array();
      $path_length[$imagegroup] = array();
      // select the first one that I've got      
      $to_attach = $imagegroup;

      // initialize current group
      $current = $to_attach;
          
      // go down from the image path through the parents until current is 0 (= main group)
      while($current != 0) {
        $data = wisski_pathbuilder_getPathData($current);
        $path_length[$current] = count(unserialize($data['path_array']));
        if($data['fieldtype'] == "ontogroup")
          $multigroups[$current] = TRUE;
        else
          $multigroups[$current] = FALSE;
        $to_get_there[$imagegroup] = array_merge(array($current), $to_get_there[$imagegroup]);
        $current = $data['group_id'];
      }
    }
    
    
    foreach($form_state['values']['files'] as $file) {
      if(preg_match('/(\.png|\.jpg|\.jpeg|\.gif|\.tif|\.tiff)$/i', $file['filename'])) {
        $already_there = FALSE;

        // recursively search the image        
        $found = wisski_recursive_array_search(file_create_url($file['filepath']), $form_state['values'], $file['remove']);
        // already there?
        if($found !== FALSE)
          $already_there = TRUE;          
       
        // only add it, if it is not already there and it is not going to be deleted.
        if(!$already_there && !$file['remove']) {

          // we didn't find it, so we add it to the one with the shortest path
          $pathlength = $path_length[$imagegroups[0]];
          $imagegroup = $imagegroups[0];

          foreach($imagegroups as $one_group) {
            if($path_length[$one_group] < $pathlength) {
              $pathlength = $path_length[$one_group];
              $imagegroup = $one_group;
            }
          }
          
          $fs_pointer = &$form_state['values'];
      
          foreach($to_get_there[$imagegroup] as $go_to) {
            if($multigroups[$go_to])
              $fs_pointer = &$fs_pointer[$go_to][$go_to][$go_to . '_0'];
            else
              $fs_pointer = &$fs_pointer[$go_to][$go_to];
          }

          $fs_pointer[$imagegroup . '_' . count($fs_pointer)] = file_create_url($file['filepath']);
        }
      }
    }
  }
}

function wisski_images_alter_add_submit($form, &$form_state) {

  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('module', 'upload', 'upload');  

  if (module_exists('upload')) upload_node_form_submit(&$form, $form_state);

  
  wisski_imageprocessing($form, $form_state);
  
  wisski_images_rescue_values($form, $form_state);

  wisski_pathbuilder_build_group_submit($form, $form_state);

}

function wisski_images_alter_edit_submit($form, &$form_state) {
  module_load_include('inc', 'wisski_pathbuilder', 'wisski_pathbuilder');
  module_load_include('module', 'upload', 'upload');

  if (module_exists('upload')) upload_node_form_submit(&$form, $form_state);

  
  wisski_imageprocessing($form, $form_state);

  wisski_images_rescue_values($form, $form_state);
  
  wisski_pathbuilder_template_edit_submit($form, $form_state);

}

function wisski_images_rescue_values($form, &$form_state) {

  $form_state['wisskiValues'] = $form_state['values'];
  
//  drupal_set_message("rescued!");  
  if(empty($form_state['wisskiValues']['old_values'])) {
    $form_state['wisskiValues']['old_values'] = $form_state['values']['defaults'];
  }
  
  if(empty($form_state['wisskiValues']['old_paths'])) {
    $form_state['wisskiValues']['old_paths'] = $form_state['values']['old_paths'];
  }
  
}



/* ============================== PB Hooks ============================= */


/* This Function implements hook_pb_fieldtypes
 * With this you can add own custom fieldtypes, too
 * @author Mark Fichtner
 */
function wisski_images_pb_fieldtypes() {
  return array("images" => "images", "subtitle" => "subtitle"/*, "image_thumb" => "image_thumb"*/);
}

/* This Function implements hook_pb_fieldtypes
 * With this you can add own custom fieldtypes, too
 * @author Mark Fichtner
 */

function wisski_images_pb_fieldinformation($fieldtype) {
  
  if($fieldtype == "images") {
    return array("edit_type"    => "multiple",
                 "delete_empty" => false,
                 "add_button"   => true,
                 "display_type" => "textfield");
  }
  
  if($fieldtype == "subtitle") {
    return array("edit_type"    => "single",
                 "delete_empty" => false,
                 "add_button"   => false,
                 "display_type" => "textfield");
  }
  
/*  if($fieldtype == "image_thumb") {
    return array("edit_type"    => "single",
                 "delete_empty" => FALSE,
                 "add_button"   => FALSE,
                 "display_type" => "textfield");
  }
*/  
  return array();

}

function wisski_images_pb_individual_updated($individual) {
  db_query("DELETE FROM {wisski_image_cache} WHERE nodeurl = '" . $individual . "'");
}
